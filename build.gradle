plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.odiga'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def queryDslSrcDir = 'src/main/generated/querydsl/'

tasks.withType(JavaCompile).configureEach {
    options.getGeneratedSourceOutputDirectory().set(file(queryDslSrcDir))
}

sourceSets {
    main.java.srcDirs += [queryDslSrcDir]
}

clean.doLast {
    file(queryDslSrcDir).deleteDir()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'


    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"
    implementation group: 'org.hibernate', name: 'hibernate-spatial', version: '6.6.12.Final'

    // DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jacocoTestReport {
    executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

    reports {
        html.required = true
        xml.required = true
    }
    excludedClassFilesForReport(classDirectories)
}

// 테스트 커버리지 검사 -> GiHub Actions 에서 커버리지 검사를 하기 때문에 제외
//jacocoTestCoverageVerification {
//    excludedClassFilesForReport(classDirectories)
//    violationRules {
//        rule {
//            element 'CLASS'
//
//            limit {
//                counter = 'LINE'
//                value = 'COVEREDRATIO'
//                minimum = 0.75
//            }
//
//            limit {
//                counter = 'METHOD'
//                value = 'COVEREDRATIO'
//                minimum = 0.75
//            }
//        }
//    }
//}

private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/global/**",
                        "**/dto/**",
                        "**/*domain*/**",
                        "**/*Application*",
                        "**/controller/**",
                        "**/exception/**",
                        "**/enums/**",
                        "**/Q*.class",          // QueryDSL Q classes
                        "**/generated/**"
                ])
            })
    )
}

